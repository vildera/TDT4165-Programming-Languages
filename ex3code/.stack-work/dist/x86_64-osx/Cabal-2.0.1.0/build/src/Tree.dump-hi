
==================== FINAL INTERFACE ====================
2018-09-15 16:53:11.733651 UTC

interface ex3code-0.1.0.0-6rUj3bfK7Y5I8oTjgnWRc3:Tree 8022
  interface hash: fe81c6656701b558b81d2ce0fd6c074a
  ABI hash: d86f1d3014070a746b2289b2c09dd5f2
  export-list hash: d92ac094257c6b3a4521e5d691789b27
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0451a77cc0d8e5d99d548d6441c7dd35
  sig of: Nothing
  used TH splices: False
  where
exports:
  Tree.Tree{Tree.Branch Tree.Leaf}
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
793834bf1774a81fa8c7ecb0b970e28b
  $fEqTree :: GHC.Classes.Eq a => GHC.Classes.Eq (Tree.Tree a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Tree.Tree a)
                  (Tree.$fEqTree_$c== @ a v)
                  (Tree.$fEqTree_$c/= @ a v) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fEqTree_$c/= ::
    GHC.Classes.Eq a => Tree.Tree a -> Tree.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: Tree.Tree a)
                   (b :: Tree.Tree a) ->
                 case Tree.$fEqTree_$c== @ a $dEq a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fEqTree_$c== ::
    GHC.Classes.Eq a => Tree.Tree a -> Tree.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree :: Data.Foldable.Foldable Tree.Tree
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Tree.Tree
                  Tree.$fFoldableTree_$cfold
                  Tree.$fFoldableTree_$cfoldMap
                  Tree.$fFoldableTree_$cfoldr
                  Tree.$fFoldableTree_$cfoldr'
                  Tree.$fFoldableTree_$cfoldl
                  Tree.$fFoldableTree_$cfoldl'
                  Tree.$fFoldableTree_$cfoldr1
                  Tree.$fFoldableTree_$cfoldl1
                  Tree.$fFoldableTree_$ctoList
                  Tree.$fFoldableTree_$cnull
                  Tree.$fFoldableTree_$clength
                  Tree.$fFoldableTree_$celem
                  Tree.$fFoldableTree_$cmaximum
                  Tree.$fFoldableTree_$cminimum
                  Tree.$fFoldableTree2
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Tree.Tree a>_R
                   ->_R Data.Monoid.N:Sum[0] <a>_R)
                  Tree.$fFoldableTree1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Tree.Tree a>_R
                   ->_R Data.Monoid.N:Product[0] <a>_R) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree1 ::
    GHC.Num.Num a => Tree.Tree a -> Data.Monoid.Product a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,1*C1(U))>,
     Unfolding: (\ @ a ($dNum :: GHC.Num.Num a) ->
                 Tree.$fFoldableTree_$cfoldr
                   @ a
                   @ (Data.Monoid.Product a)
                   (\ (x :: a) -> GHC.Num.* @ a $dNum x)
                     `cast`
                   (<a>_R
                    ->_R Sym (Data.Monoid.N:Product[0] <a>_R)
                    ->_R Sym (Data.Monoid.N:Product[0] <a>_R))
                   (Data.Monoid.$fMonoidProduct2 @ a $dNum)
                     `cast`
                   (Sym (Data.Monoid.N:Product[0] <a>_R))) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree2 ::
    GHC.Num.Num a => Tree.Tree a -> Data.Monoid.Sum a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,1*C1(U))>,
     Unfolding: (\ @ a ($dNum :: GHC.Num.Num a) ->
                 Tree.$fFoldableTree_$cfoldr
                   @ a
                   @ (Data.Monoid.Sum a)
                   (\ (x :: a) -> GHC.Num.+ @ a $dNum x)
                     `cast`
                   (<a>_R
                    ->_R Sym (Data.Monoid.N:Sum[0] <a>_R)
                    ->_R Sym (Data.Monoid.N:Sum[0] <a>_R))
                   (Data.Monoid.$fMonoidSum2 @ a $dNum)
                     `cast`
                   (Sym (Data.Monoid.N:Sum[0] <a>_R))) -}
a930925838aec5f97071048d91501114
  $fFoldableTree3 :: a
  {- Strictness: x -}
dd60f184b13526304b9918dd0522907f
  $fFoldableTree4 :: a
  {- Strictness: x -}
6370c5dc9fad385bfc82ac400ba44b84
  $fFoldableTree5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
4c45bce190f0a8e753001960f55eca61
  $fFoldableTree6 ::
    a
    -> (GHC.Types.Int -> GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><C(S),1*C1(U(U))><S,1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (x :: a)
                   (k :: GHC.Types.Int -> GHC.Types.Int)
                   (z :: GHC.Types.Int) ->
                 case z of wild { GHC.Types.I# x1 ->
                 k (GHC.Types.I# (GHC.Prim.+# x1 1#)) }) -}
81ddac18498595a86561c6d83222f806
  $fFoldableTree7 :: a -> GHC.Types.Bool -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a (ds :: a) (ds1 :: GHC.Types.Bool) -> GHC.Types.False) -}
390b1921d473621620054b146576598b
  $fFoldableTree8 :: a
  {- Strictness: x -}
89b937a0428f3df9b54f1e7a9e3946fb
  $fFoldableTree9 :: a
  {- Strictness: x -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree_$celem ::
    GHC.Classes.Eq a => a -> Tree.Tree a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   f2 :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 (Tree.$fFoldableTree_$cfoldr
                    @ a
                    @ Data.Monoid.Any
                    (\ (x :: a) ->
                     let {
                       ds :: GHC.Types.Bool = f2 x
                     } in
                     (\ (ds1 :: GHC.Types.Bool) ->
                      case ds of wild {
                        GHC.Types.False -> ds1 GHC.Types.True -> GHC.Types.True })
                       `cast`
                     (Nth:3
                          (Trans
                               (Sym (Data.Monoid.N:Any[0])
                                ->_R Sym (Data.Monoid.N:Any[0])
                                ->_R <GHC.Types.Bool>_R)
                               (<Data.Monoid.Any>_R
                                ->_R <Data.Monoid.Any>_R
                                ->_R Sym (Data.Monoid.N:Any[0])))))
                    GHC.Types.False `cast` (Sym (Data.Monoid.N:Any[0])))
                   `cast`
                 (<Tree.Tree a>_R ->_R Data.Monoid.N:Any[0])) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree_$cfold :: GHC.Base.Monoid m => Tree.Tree m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),U(1*U,C(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ m
                   ($dMonoid :: GHC.Base.Monoid m)
                   (eta :: Tree.Tree m) ->
                 Tree.$fFoldableTree_$cfoldr
                   @ m
                   @ m
                   (\ (x :: m) -> GHC.Base.mappend @ m $dMonoid x)
                   (GHC.Base.mempty @ m $dMonoid)
                   eta) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree_$cfoldMap ::
    GHC.Base.Monoid m => (a -> m) -> Tree.Tree a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),U(1*U,C(C1(U)),A)><L,C(U)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m @ a ($dMonoid :: GHC.Base.Monoid m) (f2 :: a -> m) ->
                 Tree.$fFoldableTree_$cfoldr
                   @ a
                   @ m
                   (let {
                      f3 :: m -> m -> m = GHC.Base.mappend @ m $dMonoid
                    } in
                    \ (x :: a) -> f3 (f2 x))
                   (GHC.Base.mempty @ m $dMonoid)) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree_$cfoldl :: (b -> a -> b) -> b -> Tree.Tree a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   (f2 :: b -> a -> b)
                   (z :: b)
                   (t1 :: Tree.Tree a) ->
                 (Tree.$fFoldableTree_$cfoldr
                    @ a
                    @ (Data.Monoid.Dual (Data.Monoid.Endo b))
                    (\ (x :: a)
                       (eta :: Data.Monoid.Dual (Data.Monoid.Endo b))[OneShot]
                       (eta1 :: b) ->
                     eta
                       `cast`
                     (Trans
                          (Nth:2
                               (Nth:3
                                    (Trans
                                         (<Data.Monoid.Dual (Data.Monoid.Endo b)>_R
                                          ->_R <Data.Monoid.Dual (Data.Monoid.Endo b)>_R
                                          ->_R Data.Monoid.N:Dual[0] <Data.Monoid.Endo b>_R)
                                         (<Data.Monoid.Dual (Data.Monoid.Endo b)>_R
                                          ->_R <Data.Monoid.Dual (Data.Monoid.Endo b)>_R
                                          ->_R Data.Monoid.N:Endo[0] <b>_R))))
                          (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b>_R)))
                       (f2 eta1 x))
                      `cast`
                    (<a>_R
                     ->_R <Data.Monoid.Dual (Data.Monoid.Endo b)>_R
                     ->_R Sym (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b>_R)))
                    (GHC.Base.id @ b)
                      `cast`
                    (Sym (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b>_R)))
                    t1)
                   `cast`
                 (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b>_R))
                   z) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree_$cfoldl' :: (b -> a -> b) -> b -> Tree.Tree a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   (f2 :: b -> a -> b)
                   (z0 :: b)
                   (xs :: Tree.Tree a) ->
                 Tree.$fFoldableTree_$cfoldr
                   @ a
                   @ (b -> b)
                   (\ (x :: a) (k :: b -> b)[OneShot] (z :: b) ->
                    case f2 z x of vx { DEFAULT -> k vx })
                   (GHC.Base.id @ b)
                   xs
                   z0) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree_$cfoldl1 :: (a -> a -> a) -> Tree.Tree a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a (f2 :: a -> a -> a) (xs :: Tree.Tree a) ->
                 case (Tree.$fFoldableTree_$cfoldr
                         @ a
                         @ (Data.Monoid.Dual (Data.Monoid.Endo (GHC.Base.Maybe a)))
                         (\ (x :: a)
                            (eta :: Data.Monoid.Dual
                                      (Data.Monoid.Endo (GHC.Base.Maybe a)))[OneShot]
                            (eta1 :: GHC.Base.Maybe a) ->
                          eta
                            `cast`
                          (Trans
                               (Nth:2
                                    (Nth:3
                                         (Trans
                                              (<Data.Monoid.Dual
                                                  (Data.Monoid.Endo (GHC.Base.Maybe a))>_R
                                               ->_R <Data.Monoid.Dual
                                                       (Data.Monoid.Endo (GHC.Base.Maybe a))>_R
                                               ->_R Data.Monoid.N:Dual[0]
                                                        <Data.Monoid.Endo (GHC.Base.Maybe a)>_R)
                                              (<Data.Monoid.Dual
                                                  (Data.Monoid.Endo (GHC.Base.Maybe a))>_R
                                               ->_R <Data.Monoid.Dual
                                                       (Data.Monoid.Endo (GHC.Base.Maybe a))>_R
                                               ->_R Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R))))
                               (Data.Monoid.N:Dual[0]
                                    (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R)))
                            (GHC.Base.Just
                               @ a
                               (case eta1 of wild {
                                  GHC.Base.Nothing -> x GHC.Base.Just x1 -> f2 x1 x })))
                           `cast`
                         (<a>_R
                          ->_R <Data.Monoid.Dual (Data.Monoid.Endo (GHC.Base.Maybe a))>_R
                          ->_R Sym (Data.Monoid.N:Dual[0]
                                        (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R)))
                         (GHC.Base.id @ (GHC.Base.Maybe a))
                           `cast`
                         (Sym (Data.Monoid.N:Dual[0]
                                   (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R)))
                         xs)
                        `cast`
                      (Data.Monoid.N:Dual[0]
                           (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R))
                        (GHC.Base.Nothing @ a) of wild {
                   GHC.Base.Nothing -> Tree.$fFoldableTree8 @ a
                   GHC.Base.Just v -> v }) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree_$cfoldr :: (a -> b -> b) -> b -> Tree.Tree a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),C(C1(U))><L,U><S,1*U> -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree_$cfoldr' :: (a -> b -> b) -> b -> Tree.Tree a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f2 :: a -> b -> b)
                   (z0 :: b)
                   (xs :: Tree.Tree a) ->
                 (Tree.$fFoldableTree_$cfoldr
                    @ a
                    @ (Data.Monoid.Dual (Data.Monoid.Endo (b -> b)))
                    (\ (x :: a)
                       (eta :: Data.Monoid.Dual (Data.Monoid.Endo (b -> b)))[OneShot]
                       (eta1 :: b -> b) ->
                     eta
                       `cast`
                     (Trans
                          (Nth:2
                               (Nth:3
                                    (Trans
                                         (<Data.Monoid.Dual (Data.Monoid.Endo (b -> b))>_R
                                          ->_R <Data.Monoid.Dual (Data.Monoid.Endo (b -> b))>_R
                                          ->_R Data.Monoid.N:Dual[0] <Data.Monoid.Endo (b -> b)>_R)
                                         (<Data.Monoid.Dual (Data.Monoid.Endo (b -> b))>_R
                                          ->_R <Data.Monoid.Dual (Data.Monoid.Endo (b -> b))>_R
                                          ->_R Data.Monoid.N:Endo[0] <b -> b>_R))))
                          (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b -> b>_R)))
                       (\ (z :: b) -> case f2 x z of vx { DEFAULT -> eta1 vx }))
                      `cast`
                    (<a>_R
                     ->_R <Data.Monoid.Dual (Data.Monoid.Endo (b -> b))>_R
                     ->_R Sym (Data.Monoid.N:Dual[0]
                                   (Data.Monoid.N:Endo[0] <b -> b>_R)))
                    (GHC.Base.id @ (b -> b))
                      `cast`
                    (Sym (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b -> b>_R)))
                    xs)
                   `cast`
                 (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b -> b>_R))
                   (GHC.Base.id @ b)
                   z0) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree_$cfoldr1 :: (a -> a -> a) -> Tree.Tree a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a (f2 :: a -> a -> a) (xs :: Tree.Tree a) ->
                 case Tree.$fFoldableTree_$cfoldr
                        @ a
                        @ (GHC.Base.Maybe a)
                        (\ (x :: a) (m :: GHC.Base.Maybe a)[OneShot] ->
                         GHC.Base.Just
                           @ a
                           (case m of wild {
                              GHC.Base.Nothing -> x GHC.Base.Just y -> f2 x y }))
                        (GHC.Base.Nothing @ a)
                        xs of wild {
                   GHC.Base.Nothing -> Tree.$fFoldableTree9 @ a
                   GHC.Base.Just v -> v }) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree_$clength :: Tree.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: Tree.Tree a) ->
                 Tree.$fFoldableTree_$cfoldr
                   @ a
                   @ (GHC.Types.Int -> GHC.Types.Int)
                   (Tree.$fFoldableTree6 @ a)
                   (GHC.Base.id @ GHC.Types.Int)
                   xs
                   Tree.$fFoldableTree5) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree_$cmaximum :: GHC.Classes.Ord a => Tree.Tree a -> a
  {- Arity: 2, Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (eta :: Tree.Tree a) ->
                 case (Tree.$fFoldableTree_$cfoldr
                         @ a
                         @ (Data.Functor.Utils.Max a)
                         (\ (x :: a) (eta1 :: Data.Functor.Utils.Max a)[OneShot] ->
                          case eta1 `cast` (Data.Functor.Utils.N:Max[0] <a>_N) of wild {
                            GHC.Base.Nothing
                            -> (GHC.Base.Just @ a x)
                                 `cast`
                               (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                            GHC.Base.Just ipv
                            -> case GHC.Classes.>= @ a $dOrd x ipv of wild2 {
                                 GHC.Types.False
                                 -> wild `cast` (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                 GHC.Types.True
                                 -> (GHC.Base.Just @ a x)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Max[0]) <a>_N) } })
                         (GHC.Base.Nothing @ a)
                           `cast`
                         (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                         eta)
                        `cast`
                      (Data.Functor.Utils.N:Max[0] <a>_N) of wild {
                   GHC.Base.Nothing -> Tree.$fFoldableTree4 @ a
                   GHC.Base.Just v -> v }) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree_$cminimum :: GHC.Classes.Ord a => Tree.Tree a -> a
  {- Arity: 2, Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (eta :: Tree.Tree a) ->
                 case (Tree.$fFoldableTree_$cfoldr
                         @ a
                         @ (Data.Functor.Utils.Min a)
                         (\ (x :: a) (eta1 :: Data.Functor.Utils.Min a)[OneShot] ->
                          case eta1 `cast` (Data.Functor.Utils.N:Min[0] <a>_N) of wild {
                            GHC.Base.Nothing
                            -> (GHC.Base.Just @ a x)
                                 `cast`
                               (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                            GHC.Base.Just ipv
                            -> case GHC.Classes.<= @ a $dOrd x ipv of wild2 {
                                 GHC.Types.False
                                 -> wild `cast` (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                 GHC.Types.True
                                 -> (GHC.Base.Just @ a x)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Min[0]) <a>_N) } })
                         (GHC.Base.Nothing @ a)
                           `cast`
                         (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                         eta)
                        `cast`
                      (Data.Functor.Utils.N:Min[0] <a>_N) of wild {
                   GHC.Base.Nothing -> Tree.$fFoldableTree3 @ a
                   GHC.Base.Just v -> v }) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree_$cnull :: Tree.Tree a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a ->
                 Tree.$fFoldableTree_$cfoldr
                   @ a
                   @ GHC.Types.Bool
                   (Tree.$fFoldableTree7 @ a)
                   GHC.Types.True) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fFoldableTree_$ctoList :: Tree.Tree a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (t1 :: Tree.Tree a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    Tree.$fFoldableTree_$cfoldr @ a @ b c n t1)) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fShowTree :: GHC.Show.Show a => GHC.Show.Show (Tree.Tree a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Tree.Tree a)
                  (Tree.$fShowTree_$cshowsPrec @ a v)
                  (Tree.$fShowTree_$cshow @ a v)
                  (Tree.$fShowTree_$cshowList @ a v) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fShowTree_$cshow ::
    GHC.Show.Show a => Tree.Tree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Tree.Tree a) ->
                 Tree.$fShowTree_$cshowsPrec
                   @ a
                   $dShow
                   Tree.$fFoldableTree5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fShowTree_$cshowList ::
    GHC.Show.Show a => [Tree.Tree a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Tree.Tree a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Tree.Tree a)
                   (Tree.$fShowTree_$cshowsPrec @ a $dShow Tree.$fFoldableTree5)
                   eta
                   eta1) -}
793834bf1774a81fa8c7ecb0b970e28b
  $fShowTree_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Tree.Tree a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Tree.Tree a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Tree.$w$cshowsPrec @ a w ww1 w2 }) -}
56d0f91002b36c1030b8fe6d81f5aaa5
  $tc'Branch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1062683623886900331##
                   14601858965021847909##
                   Tree.$trModule
                   Tree.$tc'Branch2
                   1#
                   Tree.$tc'Branch1) -}
81e781219e74584d4109175669a5159c
  $tc'Branch1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
699e1e097528929deac95777ba644c1a
  $tc'Branch2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tree.$tc'Branch3) -}
e6ca2a06536d4d445aba82ef3660f786
  $tc'Branch3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Branch"#) -}
13c6bf1c2d4a4de5e26e47bd5e1b69e4
  $tc'Leaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4797420067650423206##
                   7371070675600275777##
                   Tree.$trModule
                   Tree.$tc'Leaf2
                   1#
                   Tree.$tc'Leaf1) -}
d8c38850eaabd738f1ab3d462dcc5845
  $tc'Leaf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4af91ee0366752521e91adabafa06203
  $tc'Leaf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tree.$tc'Leaf3) -}
7df4ef9077b701d4d42bfcddbdf16d62
  $tc'Leaf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Leaf"#) -}
1a5d01da0ab9d9b46e73fd49d02dda03
  $tcTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   413571253305286756##
                   13531043519877331261##
                   Tree.$trModule
                   Tree.$trModule1
                   0#
                   GHC.Types.krep$*Arr*) -}
d5965cea952dcacb25902f09e29acce9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Tree.$trModule3 Tree.$trModule1) -}
dd9ec1d974ae7e8a592cd649544ac4d7
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tree.$trModule2) -}
78e7d5be79c4f7d0d6b63ca7826509d1
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tree"#) -}
2291fcf5b74c681e788ea786bc9135bb
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tree.$trModule4) -}
bfca68427c0cff04bb11493c712b122e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("ex3code-0.1.0.0-6rUj3bfK7Y5I8oTjgnWRc3"#) -}
793834bf1774a81fa8c7ecb0b970e28b
  $w$cshowsPrec ::
    GHC.Show.Show a => GHC.Prim.Int# -> Tree.Tree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [0] -}
793834bf1774a81fa8c7ecb0b970e28b
  data Tree a = Branch (Tree.Tree a) a (Tree.Tree a) | Leaf a
instance [safe] GHC.Classes.Eq [Tree.Tree] = Tree.$fEqTree
instance [safe] Data.Foldable.Foldable [Tree.Tree]
  = Tree.$fFoldableTree
instance [safe] GHC.Show.Show [Tree.Tree] = Tree.$fShowTree
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

