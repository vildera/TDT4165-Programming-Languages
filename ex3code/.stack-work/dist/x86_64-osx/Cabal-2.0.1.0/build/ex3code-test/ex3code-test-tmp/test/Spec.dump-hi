
==================== FINAL INTERFACE ====================
2018-09-19 12:08:54.304619 UTC

interface main:Main 8022
  interface hash: 664ee9990aee00f4c500e8f355646dd4
  ABI hash: 98abd350e1daa754a0b66f9dd31cba36
  export-list hash: 32018c5d94b6b7f65873336a2b2138bd
  orphan hash: 21db50408a8217f50a78c071099abf46
  flag hash: ab015cb20bc43c9ec9d908c690a8dbaa
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.11.3
                      ansi-terminal-0.8.0.4 array-0.5.2.0 base-4.10.1.0 call-stack-0.1.0
                      clock-0.7.2 colour-2.3.4 containers-0.5.10.2 deepseq-1.4.3.0
                      directory-1.3.0.2 ex3code-0.1.0.0 filepath-1.4.1.2
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 hspec-2.5.4 hspec-core-2.5.4
                      hspec-expectations-0.8.2 integer-gmp-1.0.1.0 pretty-1.1.3.3
                      primitive-0.6.4.0 quickcheck-io-0.2.0 random-1.1 setenv-0.1.1.3
                      stm-2.4.5.0 template-haskell-2.12.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.2.0 unix-2.7.2.2
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         stm-2.4.5.0:Control.Monad.STM
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats clock-0.7.2:System.Clock
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         hspec-core-2.5.4:Test.Hspec.Core.Example
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck fa49a6331086b5932e924d9bc61b926c
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Gen 9b839dc612c2c75df9c65dfaaf56c69c
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Property c7ee9675ea65df1a53544321f071fac5
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ex3code-0.1.0.0:Lib 621d885ecb9b63766096ae30f98c8dbb
import  -/  ex3code-0.1.0.0:Tree d86f1d3014070a746b2289b2c09dd5f2
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  hspec-2.5.4:Test.Hspec f48b6afb214a0109890cecfc03ce3670
import  -/  hspec-core-2.5.4:Test.Hspec.Core.Runner 361c6ffaf0d3adc461305af2e86574bb
import  -/  hspec-core-2.5.4:Test.Hspec.Core.Spec 0d401eb33be6efe664a514e59f7071c0
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 8bc0d926d5b42398a254e04604809fe4
import  -/  integer-gmp-1.0.1.0:GHC.Integer.Type 5fa81108482c33b62ec3ac7464eece96
dd646554fde8764392bec7e56ea1803f
  $fEqColor :: GHC.Classes.Eq Main.Color
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Color Main.$fEqColor_$c== Main.$fEqColor_$c/= -}
dd646554fde8764392bec7e56ea1803f
  $fEqColor_$c/= :: Main.Color -> Main.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Main.Color) (b :: Main.Color) ->
                 case a of wild {
                   Main.Red
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.Red -> GHC.Types.False }
                   Main.Green
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.Green -> GHC.Types.False }
                   Main.Blue
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.Blue -> GHC.Types.False }
                   Main.Yellow
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.Yellow -> GHC.Types.False } }) -}
dd646554fde8764392bec7e56ea1803f
  $fEqColor_$c== :: Main.Color -> Main.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Main.Color) (ds1 :: Main.Color) ->
                 case ds of wild {
                   Main.Red
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Red -> GHC.Types.True }
                   Main.Green
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Green -> GHC.Types.True }
                   Main.Blue
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Blue -> GHC.Types.True }
                   Main.Yellow
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Yellow -> GHC.Types.True } }) -}
dd646554fde8764392bec7e56ea1803f
  $fOrdColor :: GHC.Classes.Ord Main.Color
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Color
                  Main.$fEqColor
                  Main.$fOrdColor_$ccompare
                  Main.$fOrdColor_$c<
                  Main.$fOrdColor_$c<=
                  Main.$fOrdColor_$c>
                  Main.$fOrdColor_$c>=
                  Main.$fOrdColor_$cmax
                  Main.$fOrdColor_$cmin -}
dd646554fde8764392bec7e56ea1803f
  $fOrdColor_$c< :: Main.Color -> Main.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Main.Color) (b :: Main.Color) ->
                 case a of wild {
                   Main.Red
                   -> case b of wild1 {
                        Main.Red -> GHC.Types.False
                        Main.Green -> GHC.Types.True
                        Main.Blue -> GHC.Types.True
                        Main.Yellow -> GHC.Types.True }
                   Main.Green
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.Blue -> GHC.Types.True
                        Main.Yellow -> GHC.Types.True }
                   Main.Blue
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False Main.Yellow -> GHC.Types.True }
                   Main.Yellow -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
dd646554fde8764392bec7e56ea1803f
  $fOrdColor_$c<= :: Main.Color -> Main.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Main.Color) (b :: Main.Color) ->
                 case b of wild {
                   Main.Red
                   -> case a of wild1 {
                        Main.Red -> GHC.Types.True
                        Main.Green -> GHC.Types.False
                        Main.Blue -> GHC.Types.False
                        Main.Yellow -> GHC.Types.False }
                   Main.Green
                   -> case a of wild1 {
                        DEFAULT -> GHC.Types.True
                        Main.Blue -> GHC.Types.False
                        Main.Yellow -> GHC.Types.False }
                   Main.Blue
                   -> case a of wild1 {
                        DEFAULT -> GHC.Types.True Main.Yellow -> GHC.Types.False }
                   Main.Yellow -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
dd646554fde8764392bec7e56ea1803f
  $fOrdColor_$c> :: Main.Color -> Main.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Main.Color) (b :: Main.Color) ->
                 Main.$fOrdColor_$c< b a) -}
dd646554fde8764392bec7e56ea1803f
  $fOrdColor_$c>= :: Main.Color -> Main.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Main.Color) (b :: Main.Color) ->
                 case a of wild {
                   Main.Red
                   -> case b of wild1 {
                        Main.Red -> GHC.Types.True
                        Main.Green -> GHC.Types.False
                        Main.Blue -> GHC.Types.False
                        Main.Yellow -> GHC.Types.False }
                   Main.Green
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Main.Blue -> GHC.Types.False
                        Main.Yellow -> GHC.Types.False }
                   Main.Blue
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.Yellow -> GHC.Types.False }
                   Main.Yellow -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
dd646554fde8764392bec7e56ea1803f
  $fOrdColor_$ccompare ::
    Main.Color -> Main.Color -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Main.Color) (b :: Main.Color) ->
                 case a of wild {
                   Main.Red
                   -> case b of wild1 {
                        Main.Red -> GHC.Types.EQ
                        Main.Green -> GHC.Types.LT
                        Main.Blue -> GHC.Types.LT
                        Main.Yellow -> GHC.Types.LT }
                   Main.Green
                   -> case b of wild1 {
                        Main.Red -> GHC.Types.GT
                        Main.Green -> GHC.Types.EQ
                        Main.Blue -> GHC.Types.LT
                        Main.Yellow -> GHC.Types.LT }
                   Main.Blue
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Main.Blue -> GHC.Types.EQ
                        Main.Yellow -> GHC.Types.LT }
                   Main.Yellow
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT Main.Yellow -> GHC.Types.EQ } }) -}
dd646554fde8764392bec7e56ea1803f
  $fOrdColor_$cmax :: Main.Color -> Main.Color -> Main.Color
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Main.Color) (y :: Main.Color) ->
                 case y of wild {
                   Main.Red -> x
                   Main.Green
                   -> case x of wild1 {
                        DEFAULT -> Main.Green
                        Main.Blue -> Main.Blue
                        Main.Yellow -> Main.Yellow }
                   Main.Blue
                   -> case x of wild1 {
                        DEFAULT -> Main.Blue Main.Yellow -> Main.Yellow }
                   Main.Yellow -> case x of wild1 { DEFAULT -> Main.Yellow } }) -}
dd646554fde8764392bec7e56ea1803f
  $fOrdColor_$cmin :: Main.Color -> Main.Color -> Main.Color
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Main.Color) (y :: Main.Color) ->
                 case y of wild {
                   Main.Red -> case x of wild1 { DEFAULT -> Main.Red }
                   Main.Green
                   -> case x of wild1 {
                        DEFAULT -> wild1
                        Main.Blue -> Main.Green
                        Main.Yellow -> Main.Green }
                   Main.Blue
                   -> case x of wild1 { DEFAULT -> wild1 Main.Yellow -> Main.Blue }
                   Main.Yellow -> x }) -}
dd646554fde8764392bec7e56ea1803f
  $fShowColor :: GHC.Show.Show Main.Color
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Color
                  Main.$fShowColor_$cshowsPrec
                  Main.$fShowColor_$cshow
                  Main.$fShowColor_$cshowList -}
448030a0aecaff6d1a9d0cab9eb18b0c
  $fShowColor1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowColor2) -}
17d81e683babcefae59e9ad614715525
  $fShowColor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Yellow"#) -}
ca89f1fd6ee375def610c2e1c600acdd
  $fShowColor3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowColor4) -}
d3676dde98c0e8be3d641b069fff559f
  $fShowColor4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Blue"#) -}
5b5a31ffd528829572b1c7189e5b6f10
  $fShowColor5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowColor6) -}
e0964a6149601e989f19e7b6ac41ba2f
  $fShowColor6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Green"#) -}
fbd0010f9ff3c38a47d1f4f43ea2efce
  $fShowColor7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowColor8) -}
678cfbfd5c7cd126f43f51eac17c544b
  $fShowColor8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Red"#) -}
dd646554fde8764392bec7e56ea1803f
  $fShowColor_$cshow :: Main.Color -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Color) ->
                 case x of wild {
                   Main.Red -> Main.$fShowColor7
                   Main.Green -> Main.$fShowColor5
                   Main.Blue -> Main.$fShowColor3
                   Main.Yellow -> Main.$fShowColor1 }) -}
dd646554fde8764392bec7e56ea1803f
  $fShowColor_$cshowList :: [Main.Color] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Color Main.$w$cshowsPrec) -}
dd646554fde8764392bec7e56ea1803f
  $fShowColor_$cshowsPrec ::
    GHC.Types.Int -> Main.Color -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Color)
                   (w2 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec w1 w2) -}
e4fce30ca3a24733b510258bec7a1faf
  $s$fShow[] :: GHC.Show.Show [GHC.Integer.Type.Integer]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Integer.Type.Integer]
                  (\ (ds :: GHC.Types.Int) -> GHC.Show.$fShowInteger_$cshowList)
                  (\ (x :: [GHC.Integer.Type.Integer]) ->
                   GHC.Show.$fShowInteger_$cshowList
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[GHC.Integer.Type.Integer]]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [GHC.Integer.Type.Integer]
                     GHC.Show.$fShowInteger_$cshowList
                     ls
                     s) -}
2c7aebede53c20863c583fe1d79e5a13
  $smaximum1 :: GHC.Base.String
  {- Strictness: x -}
f2170674037c26409474fcda46dbbd87
  $sminimum1 :: GHC.Base.String
  {- Strictness: x -}
039c7a3e9a285e5fc2f728545a99aebb
  $tc'Blue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9943279084526582132##
                   6790008591247440631##
                   Main.$trModule
                   Main.$tc'Blue2
                   0#
                   Main.$tc'Blue1) -}
a1bbcddc0f0b631393827659255f4220
  $tc'Blue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
0493f8daaecd0f88b628ddca91fd6ce2
  $tc'Blue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Blue3) -}
289ab762f10ab4d0ef31beaedbcd91a7
  $tc'Blue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Blue"#) -}
effe9df323ed4c0be0ac1b9102bd3428
  $tc'Green :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9914196461078998278##
                   5481564151281004408##
                   Main.$trModule
                   Main.$tc'Green1
                   0#
                   Main.$tc'Blue1) -}
e9338457740176a28a2f46ed3496ab97
  $tc'Green1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Green2) -}
c148f0355e1c8ac4b53985d9c5337cdb
  $tc'Green2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Green"#) -}
0a910a72734365b926e87f8901d4faa5
  $tc'Red :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5617426204813736279##
                   12331342218150123382##
                   Main.$trModule
                   Main.$tc'Red1
                   0#
                   Main.$tc'Blue1) -}
3c683ad17d585b68fabb610c8176d59c
  $tc'Red1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Red2) -}
0aed0acd95af31238d9c52532d0fbef0
  $tc'Red2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Red"#) -}
b4f288c46cd23746c68434db92a717c6
  $tc'Yellow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7105212286096344478##
                   9287573668656899957##
                   Main.$trModule
                   Main.$tc'Yellow1
                   0#
                   Main.$tc'Blue1) -}
c02d3e39524961caa4ea12acf3b647df
  $tc'Yellow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Yellow2) -}
6a91962d424bf302836e002eb899c626
  $tc'Yellow2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Yellow"#) -}
221ab56881dd352af7ffa70d0b6a4fb1
  $tcColor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6996184027453350222##
                   13104320352684360558##
                   Main.$trModule
                   Main.$tcColor1
                   0#
                   GHC.Types.krep$*) -}
3fb6ea002aaf00e2a0922062198cab99
  $tcColor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcColor2) -}
102c397d3dbfd38ec365d35108004744
  $tcColor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Color"#) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
dd646554fde8764392bec7e56ea1803f
  $w$cshowsPrec :: Main.Color -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Main.Color) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Main.Red -> GHC.Base.++ @ GHC.Types.Char Main.$fShowColor7 w1
                   Main.Green -> GHC.Base.++ @ GHC.Types.Char Main.$fShowColor5 w1
                   Main.Blue -> GHC.Base.++ @ GHC.Types.Char Main.$fShowColor3 w1
                   Main.Yellow
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fShowColor1 w1 }) -}
dd646554fde8764392bec7e56ea1803f
  data Color = Red | Green | Blue | Yellow
98714c6b209d7a98c361467812455d26
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
31e0048794b6f81e4af5f67b57a27b14
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Test.Hspec.Core.Config.Options.defaultConfig
                        Main.main2
                          `cast`
                        (Trans
                             (Sym (GHC.Types.N:IO[0]
                                       <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                            <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0] <()>_N) <()>_N)))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
deb1e4eeefa1ed9b4424f9b61d064210
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U> -}
8c9734551fb28ce92ad83e98ae16342a
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
instance GHC.Classes.Eq [Main.Color] = Main.$fEqColor
instance GHC.Classes.Ord [Main.Color] = Main.$fOrdColor
instance GHC.Show.Show [Main.Color] = Main.$fShowColor
"SPEC/Main $fShow[] @ Integer" [orphan] forall (v :: GHC.Show.Show
                                                       GHC.Integer.Type.Integer)
  GHC.Show.$fShow[] @ GHC.Integer.Type.Integer v = Main.$s$fShow[]
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

